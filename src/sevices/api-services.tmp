import { client, Query, Field } from "@tilework/opus";
import type { DataType } from '@tilework/opus';

import { Category, Product } from '../types/data.types'

const END_POINT = "http://localhost:4000/graphql";

client.setEndpoint(END_POINT);

export const getCurrencies = async () => {
	const query = new Query("currencies", true)
		.addFieldList([
			"label",
			"symbol",
		])

	return await client.post(query)

}



export const getCategories = async () => {
	const query = new Query<string, Category, boolean>("categories", true)
		.addField(new Field("name", true))
		.addField((new Field("products", true))
			.addFieldList([
				"id",
				"name",
				"inStock",
				"gallery",
				"prices{currency{label, symbol}, amount}",
				"brand",
			]))
	let result: DataType<typeof query>;
	result = await client.post(query)
	return result

}

export const getCategoriesName = async () => {
	const query = new Query<string, Category, boolean>("categories", false)
		.addField(new Field("name", true))
	let result: DataType<typeof query>;
	result = await client.post(query)
	return result

}


export const getCategory = async (category: string): Promise<Product[]> => {
	const query = new Query<string, Category, boolean>("category", true)
		.addArgument("input", "CategoryInput", { title: category })
		.addField(new Field<"name", Partial<Category>, boolean>("name", true))
		.addField((new Field<"products", Partial<Category>, boolean>("products", true))
			.addFieldList([
				"id",
				"name",
				"inStock",
				"gallery",
				"attributes{id, name, type, items{ displayValue, value, id }}",
				"prices{currency{label, symbol}, amount}",
				"brand",
			]))
	let result: DataType<typeof query>;
	result = await client.post(query)
	const res = result.category.products as { products: Product }[]
	return res;
}
export const getProduct = async (id: string) => {
	const query = new Query("product", false)
		.addArgument("id", "String!", id)
		.addFieldList([
			"id",
			"name",
			"inStock",
			"gallery",
			"description",
			"category",
			"attributes{id, name, type, items{ displayValue, value, id }}",
			"prices{ currency{ label, symbol }, amount }",
			"brand",
		])

	const res = await client.post(query);
	return res.product;
}

type A = {
	name: string
}

type B = {
	id: number
}


const a: A & B = {
	name: 'd',
	id: ''
}

console.log(a);











let result: DeepReadonlyObject<{
	[x: string]: (Category & {
		name: unknown[];
	} & {
		products: {
			name: any;
			id: any;
			inStock: any;
			gallery: any;
			"prices{currency{label, symbol}, amount}": any;
			brand: any;
			"attributes{id, name, type, items{ displayValue, value, id }}": any;
		}[];
	}) | (Category & ... 1 more ... & {
		products: {
			name: any;
			id: any;
			inStock: any;
			gallery: any;
			"prices{currency{label, symbol}, amount}": any;
			brand: any;
			"attributes{id, name, type, items{ displayValue, value, id }}": any;
		}[];
	})[];
}>
